@ROUT make.inc 
#
# inc file for the Makefile  of the Kernel generator 
#
   TOP =
#  ---------------------------------------
#  Make.inc for GSDDMM kernel generator 
#  ---------------------------------------

   SHELL = /bin/sh 

#  ----------------------------------------
#  Paths to various directories 
#  ---------------------------------------
   
   BINdir = $(TOP)/bin
   BLDdir = $(TOP)/obj
   SRCdir = $(TOP)/src
   CGENdir = $(TOP)/codegen
   INCSdir = $(TOP)/include
   SIMDdir = $(TOP)/simd
   LIBdir = $(TOP)/lib
   RUNdir= $(TOP)/script
   GENdir = $(TOP)/generated
   GENSRCdir = $(GENdir)/src
   GENINCdir = $(GENdir)/include

#  ----------------------------------------
#  General purpose compiler 
#  ---------------------------------------
   CC = gcc
   CFLAGS = -O3 -w 

#  ----------------------------------------
#  Kernel compiler (replaced by)
#     gcc 
#  KFLAGS (replaced by) 
#     -O3 -mavx -mfma
#     -O3 -mavx512f -mavx512dq 
#     -O3 -march=armv8-a
#  ---------------------------------------
   KCC = 
   KCCFLAGS = 
#  -----------------------------------------------------
#  Architecture related, we will probe the system later 
#  See $(INCSdir)/simd.h for details
#  
#  ARCH
#     BLC_X86 
#     BLC_ARM64
#     --BLC_OpenPOWER
#  SIMD 
#     BLC_AVXZ
#     BLC_AVX2
#     BLC_AVX
#     BLC_ARM_ASIMD
#     BLC_POWER_VSX
#        
#  -----------------------------------------------------
   ARCH = 
   SIMD =  
   ARCHFLAGS = -DBLC_ARCH -D$(ARCH) -D$(SIMD)  

@ROUT make.top
#
#  Top Makefile to run, test and time FUSEDMM 
#
BIN = ./bin
Kdir = ./kernels
Tdir = ./test
KLIBdir = $(Kdir)/lib
KINCdir = $(Kdir)/include

# indextype : int64_t or int32_t
# NOTE: when comparing with MKL, use ibit=64 since we are using MKL_ILP64
ibit=64
#ibit=32

# valuetype precision : double single 
pre=s

#
# SIMD width on system: 
#    Depend on ARCH, configure step sets SIMD variable in kernels/make.inc 
#    See kernels/include/simd.h for different width on different system  
#
vlen=8

#
#  Register blocking strategies: 
#  	bacrb = all three dense matrix register blocked
#  	acrb = X(A) and Z(C) register blocked
#  	crb = only Z(C) is register blocked 
#
regblk=bacrb 
#regblk=acrb 
#regblk=crb 

#
#   Two different phases: 
#   	K-compile time: kernel generated upto mdim but fully unrolled  
#   	K-runtime: kernel generated upto bestK unrolled and rolled beyond
#   Note: K-compile time mode only support kernels upto mdim, for arbitrary 
#   K, we should use K-runtime but after tuning the bestK 
#
#kruntime=0
mdim=1024 

kruntime=1   # 0 means K compile time, used in tuning phase  
bestK=512    # needed when kruntime=1, normally got from tuning step  

kern=s   # t = tdist/fr, s = sigmoid, m = spmm, g = gcn 

# =============================================================================
#  General Flags 
# ============================================================================
#setup flags based on type 
ifeq ($(pre), d)
   dtyp=-DDREAL
else
   dtyp=-DSREAL
endif
TYPFLAGS = -DINDEXTYPE=int$(ibit)_t -DINT$(ibit) $(dtyp)

# Library info  
sLIBS=$(KLIBdir)/$(pre)libgfusedMM_sequential.a 
ptLIBS=$(KLIBdir)/$(pre)libgfusedMM_pt.a 

KINCS=$(KINCdir)/kernels.h 

#
# tester/timer's compiler 
#
CC = gcc
CCFLAGS = -fopenmp -O3 -march=native 

CPP = g++
CPPFLAGS = -fopenmp -O3 -march=native -std=c++11

#
# My parallel flags 
#
ldb=l
NTHREADS= 6
#NTHREADS=6
LDB=LOAD_BALANCE 
MYPT_FLAG = -DPTTIME -DNTHREADS=$(NTHREADS) -D$(LDB)  
#MYPT_FLAG = -DPTTIME -DNTHREADS=$(NTHREADS) -DSTATIC  

# =============================================================================
#	Flags for MKL 
# =============================================================================

MKLROOT = /opt/intel/mkl
#
#parallel version of MKL 
#
PT_CC_MKL_FLAG = -DMKL_ILP64 -m64 -I${MKLROOT}/include
PT_LD_MKL_FLAG =  -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a \
	       ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a \
	       ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lgomp \
	       -lpthread -lm -ldl  

#serial version of MKL 
CC_MKL_FLAG =  -DMKL_ILP64 -m64 -I${MKLROOT}/include
LD_MKL_FLAG =  -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a \
	       ${MKLROOT}/lib/intel64/libmkl_sequential.a \
	       ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread \
	       -lm -ldl 

# ===========================================================================
# To generate FusedMM kernels 
# ===========================================================================

$(sLIBS)  : $(ptLIBS)
$(ptLIBS) : $(Kdir)/rungen.sh  
	cd $(Kdir) ; ./rungen.sh -p $(pre) -i $(ibit) -s $(vlen) -e $(mdim) \
	   -v $(vlen) -t $(NTHREADS) -r $(regblk) -k $(kruntime) -b $(bestK)

# =============================================================================
#  Target for executable 
# ==============================================================================

@SKIP ---@multidef pt @@ @@ @_pt@ 
@define pt @@
@define pt @_pt@
@SKIP ---@multidef pflg @@ @$(MYPT_FLAG)@
@define pflg @@
@define pflg @$(MYPT_FLAG)@
@multidef lib $(sLIBs) $(ptLIBS)
@multidef par serial parallel 
@whiledef par
# ==============================================================================
#  @(par) version 
# ==============================================================================

#
#  Compiling Fusedmm  
#
   @SKIP ---@multidef optflg @@ @-DENABLE_OPT_FUSEDMM@
   @define optflg @@ 
   @define optflg @-DENABLE_OPT_FUSEDMM@
   @multidef fmm FusedMM OptFusedMM
   @whiledef fmm
$(BIN)/$(pre)@(fmm)@(pt).o: fusedMM.c fusedMM.h fusedMM_internal.h
	mkdir -p $(BIN)
	$(CC) $(CCFLAGS) $(TYPFLAGS) -I$(KINCdir) @(pflg) @(optflg)\
           -c fusedMM.c -o $@   
           @undef optflg 
   @endwhile
#
#  Compiling FusedMMTime  
#
   @multidef  kn sigmoid tdist fr spmm gcn 
   @whiledef kn
$(BIN)/$(pre)FusedMMtime_@(kn)@(pt).o: $(Tdir)/fusedMMtime.cpp fusedMM.h $(KINCdir)/kernels.h  
	mkdir -p $(BIN)
	$(CPP) $(CPPFLAGS) $(TYPFLAGS) -I$(KINCdir) -D@up@(kn)_UDEF \
	   -DCPP @(pflg) -c $(Tdir)/fusedMMtime.cpp -o $@   
   @endwhile
#
#  Executables 
#
   @multidef fmm FusedMM OptFusedMM
   @whiledef fmm
      @multidef  kn sigmoid tdist fr spmm gcn 
      @whiledef kn
$(BIN)/x$(pre)@(fmm)time_@(kn)@(pt): $(BIN)/$(pre)FusedMMtime_@(kn)@(pt).o  $(BIN)/$(pre)@(fmm)@(pt).o @(lib)  
	$(CPP) $(CPPFLAGS) -o $@ $^ @(lib) -lm
	$(BIN)/x$(pre)@(fmm)time_@(kn)@(pt) -input $(data) -T 1 -K $(d)  
      @endwhile
   @endwhile
   
   @undef pt 
   @undef pflg
   @undef lib
@endwhile 
#
# cleanup 
#
clean:
	rm -rf ./bin/*

killlib: 
	cd $(Kdir) ; make clean pre=s
@ROUT !
