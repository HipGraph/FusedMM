@ROUT make.inc 
#
# inc file for the Makefile  of the Kernel generator 
#
   TOP =
#  ---------------------------------------
#  Make.inc for GSDDMM kernel generator 
#  ---------------------------------------

   SHELL = /bin/sh 

#  ----------------------------------------
#  Paths to various directories 
#  ---------------------------------------
   
   BINdir = $(TOP)/bin
   BLDdir = $(TOP)/obj
   SRCdir = $(TOP)/src
   CGENdir = $(TOP)/codegen
   INCSdir = $(TOP)/include
   SIMDdir = $(TOP)/simd
   LIBdir = $(TOP)/lib
   RUNdir= $(TOP)/script
   GENdir = $(TOP)/generated
   GENSRCdir = $(GENdir)/src
   GENINCdir = $(GENdir)/include

#  ----------------------------------------
#  General purpose compiler 
#  ---------------------------------------
   CC = gcc
   CFLAGS = -O3 -w 

#  ----------------------------------------
#  Kernel compiler (replaced by)
#     gcc 
#  KFLAGS (replaced by) 
#     -O3 -mavx -mfma
#     -O3 -mavx512f -mavx512dq 
#     -O3 -march=armv8-a
#  ---------------------------------------
   KCC = 
   KCCFLAGS = 
#  -----------------------------------------------------
#  Architecture related, we will probe the system later 
#  See $(INCSdir)/simd.h for details
#  
#  ARCH
#     BLC_X86 
#     BLC_ARM64
#     --BLC_OpenPOWER
#  SIMD 
#     BLC_AVXZ
#     BLC_AVX2
#     BLC_AVX
#     BLC_ARM_ASIMD
#     BLC_POWER_VSX
#        
#  -----------------------------------------------------
   ARCH = 
   SIMD =  
   ARCHFLAGS = -DBLC_ARCH -D$(ARCH) -D$(SIMD)  
@SKIP **************************************************************************
@ROUT make.kern 
include Make.inc 

# precision float=s, double=d 
pre = 
ibit=64

# dimension or value of compile-time K, mdim = max dimension  
mdim = 128
dim = 4
nthds =  
# Register blocking strategy: 
#    bacrb: regblk all access, acrb: regblk a and c, crb: regblk only c
#regblk=bacrb
#regblk=acrb
regblk=crb

kruntime=0
bestK=64    # needed when kruntime = 1

@declare "header: " y n 
@multidef  kn sigmoid tdist spmm gcn
@whiledef kn
   $(GENINCdir)/$(pre)gkernels_@(kn).h
@endwhile
   $(GENINCdir)/$(pre)gmisc.h
@enddeclare 

gmakefile : $(GENdir)/Makefile

@declare "srcfile: " y n 
@multidef  kn sigmoid tdist spmm gcn
@whiledef kn
   $(GENSRCdir)/$(pre)gfusedMM_K$(dim)_@(kn)_csr.c
@endwhile
   $(GENINCdir)/$(pre)gmisc.h
@enddeclare 

libfile : staticlibs  

$(BINdir)/xextract: $(CGENdir)/extract.c 
	make -p $(CGENdir) 
	$(CC) $(CFLAGS) -o $@ $(CGENdir)/extract.c 

$(GENdir)/Makefile : $(BINdir)/xextract $(CGENdir)/genmake.base 
	$(BINdir)/xextract -b $(CGENdir)/genmake.base -langM -def MDIM $(mdim) \
	   pre=$(pre) -def VLEN $(vlen) -def ityp $(ibit) -def nthds $(nthds) \
	   -o $@  
$(GENINCdir)/$(pre)gmisc.h : $(BINdir)/xextract $(CGENdir)/genheader.base 
	$(BINdir)/xextract -b $(CGENdir)/genheader.base -langC \
	   pre=$(pre) rout=misc -o $@  

@multidef  kn sigmoid tdist spmm gcn
@whiledef kn
$(GENINCdir)/$(pre)gkernels_@(kn).h : $(BINdir)/xextract $(CGENdir)/genheader.base 
	$(BINdir)/xextract -b $(CGENdir)/genheader.base -langC \
	   -def MDIM $(mdim) pre=$(pre) -def VLEN $(vlen) rout=ghead \
	   -def frc @(kn) -def kruntime $(kruntime) -def bestK $(bestK) -o $@  
$(GENSRCdir)/$(pre)gfusedMM_K$(dim)_@(kn)_csr.c : $(BINdir)/xextract $(CGENdir)/genkern.base
	$(BINdir)/xextract -b $(CGENdir)/genkern.base -langC -def DIM $(dim) \
	   pre=$(pre) rblk=$(regblk) -def VLEN $(vlen) rout=@(kn) \
	   -def kruntime $(kruntime) -o $@  
@endwhile

staticlibs: 
	cd $(GENdir) ; make 

clean:
	rm -f $(GENSRCdir)/$(pre)*.c $(GENSRCdir)/$(pre)*.o $(GENdir)/Makefile \
		$(GENINCdir)/*.h $(LIBdir)/$(pre)*.a \
		$(BINdir)/$(pre)*.o 
kill:
	rm -f $(BINdir)/xextract 

@SKIP **************************************************************************
@ROUT make.top
#
#  Top Makefile to run, test and time FUSEDMM 
#
BIN = ./bin
Kdir = ./kernels
Tdir = ./test
KLIBdir = $(Kdir)/lib
KINCdir = $(Kdir)/include

# indextype : int64_t or int32_t
# NOTE: when comparing with MKL, use ibit=64 since we are using MKL_ILP64
ibit=64
#ibit=32

# valuetype precision : double single 
pre=s

#
# SIMD width on system: 
#    Depend on ARCH, configure step sets SIMD variable in kernels/make.inc 
#    See kernels/include/simd.h for different width on different system  
#
vlen=8

#
#  Register blocking strategies: 
#  	bacrb = all three dense matrix register blocked
#  	acrb = X(A) and Z(C) register blocked
#  	crb = only Z(C) is register blocked 
#
regblk=bacrb 
#regblk=acrb 
#regblk=crb 

#
#   Two different phases: 
#   	K-compile time: kernel generated upto mdim but fully unrolled  
#   	K-runtime: kernel generated upto bestK unrolled and rolled beyond
#   Note: K-compile time mode only support kernels upto mdim, for arbitrary 
#   K, we should use K-runtime but after tuning the bestK 
#
#kruntime=0
mdim=1024 

kruntime=1   # 0 means K compile time, used in tuning phase  
bestK=512    # needed when kruntime=1, normally got from tuning step  

kern=s   # t = tdist/fr, s = sigmoid, m = spmm, g = gcn 
data=dataset/harvard.mtx      
d=128 
# =============================================================================
#  General Flags 
# ============================================================================
#setup flags based on type 
ifeq ($(pre), d)
   dtyp=-DDREAL
else
   dtyp=-DSREAL
endif
TYPFLAGS = -DINDEXTYPE=int$(ibit)_t -DINT$(ibit) $(dtyp)

# Library info  
sLIBS=$(KLIBdir)/$(pre)libgfusedMM_sequential.a 
ptLIBS=$(KLIBdir)/$(pre)libgfusedMM_pt.a 

KINCS=$(KINCdir)/kernels.h 

#
# tester/timer's compiler 
#
CC = gcc
CCFLAGS = -fopenmp -O3 -march=native 

CPP = g++
CPPFLAGS = -fopenmp -O3 -march=native -std=c++11

#
# My parallel flags 
#
ldb=l
NTHREADS=48
#NTHREADS=6
LDB=LOAD_BALANCE 
MYPT_FLAG = -DPTTIME -DNTHREADS=$(NTHREADS) -D$(LDB)  
#MYPT_FLAG = -DPTTIME -DNTHREADS=$(NTHREADS) -DSTATIC  

# =============================================================================
#	Flags for MKL 
# =============================================================================

MKLROOT = /opt/intel/mkl
#
#parallel version of MKL 
#
PT_CC_MKL_FLAG = -DMKL_ILP64 -m64 -I${MKLROOT}/include
PT_LD_MKL_FLAG =  -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a \
	       ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a \
	       ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lgomp \
	       -lpthread -lm -ldl  

#serial version of MKL 
CC_MKL_FLAG =  -DMKL_ILP64 -m64 -I${MKLROOT}/include
LD_MKL_FLAG =  -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a \
	       ${MKLROOT}/lib/intel64/libmkl_sequential.a \
	       ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread \
	       -lm -ldl 

# =============================================================================
#  Default Target  
# ==============================================================================
@declare "all: " y n 
@multidef fmm OptFusedMM FusedMM
@whiledef fmm
@multidef  kn sigmoid tdist fr spmm gcn
   @whiledef kn
           $(BIN)/x$(pre)@(fmm)time_@(kn)_pt
   @endwhile
@endwhile
@enddeclare 

@declare "test: " y n 
@multidef fmm OptFusedMM FusedMM
@whiledef fmm
@multidef  kn sigmoid tdist fr spmm gcn
   @whiledef kn
           $(BIN)/x$(pre)@(fmm)time_@(kn)_pt
   @endwhile
@endwhile
@enddeclare 
@multidef fmm OptFusedMM FusedMM
@whiledef fmm
   @multidef  kn sigmoid tdist fr spmm gcn 
   @whiledef kn
	$(BIN)/x$(pre)@(fmm)time_@(kn)_pt -input $(data) -T 1 -K $(d)  
   @endwhile
@endwhile


# =============================================================================
# Build with MKL to compare results for SPMM 
# =============================================================================

mkl: $(BIN)/x$(pre)OptFusedMMtime_spmm_MKL_pt 
	$(BIN)/x$(pre)OptFusedMMtime_spmm_MKL_pt -input $(data) -T 1 -K $(d)  

$(BIN)/$(pre)OptFusedMMtime_spmm_MKL_pt.o: $(Tdir)/fusedMMtime.cpp fusedMM.h \
   fusedMM_internal.h   
	mkdir -p $(BIN)
	$(CPP) $(CPPFLAGS) $(TYPFLAGS) -DTIME_MKL -I$(KINCdir) -DSPMM_UDEF \
	   -DCPP $(PT_CC_MKL_FLAG) $(MYPT_FLAG) -c $(Tdir)/fusedMMtime.cpp -o $@   
$(BIN)/x$(pre)OptFusedMMtime_spmm_MKL_pt: $(BIN)/$(pre)OptFusedMMtime_spmm_MKL_pt.o \
   $(BIN)/$(pre)OptFusedMM_pt.o $(ptLIBS)  
	$(CPP) $(CPPFLAGS) -o $@ $^ $(ptLIBS) -lm $(PT_LD_MKL_FLAG)

# ===========================================================================
# To generate FusedMM kernels 
# ===========================================================================

$(sLIBS)  : $(ptLIBS)
$(ptLIBS) : $(Kdir)/rungen.sh  
	cd $(Kdir) ; ./rungen.sh -p $(pre) -i $(ibit) -s $(vlen) -e $(mdim) \
	   -v $(vlen) -t $(NTHREADS) -r $(regblk) -k $(kruntime) -b $(bestK)

# =============================================================================
#  Target for executable 
# ==============================================================================

@SKIP ---@multidef pt @@ @@ @_pt@ 
@define pt @@
@define pt @_pt@
@SKIP ---@multidef pflg @@ @$(MYPT_FLAG)@
@define pflg @@
@define pflg @$(MYPT_FLAG)@
@multidef lib $(sLIBs) $(ptLIBS)
@multidef par serial parallel 
@whiledef par
# ==============================================================================
#  @(par) version 
# ==============================================================================

#
#  Compiling Fusedmm  
#
   @SKIP ---@multidef optflg @@ @-DENABLE_OPT_FUSEDMM@
   @define optflg @@ 
   @define optflg @-DENABLE_OPT_FUSEDMM@
   @multidef fmm FusedMM OptFusedMM
   @whiledef fmm
$(BIN)/$(pre)@(fmm)@(pt).o: fusedMM.c fusedMM.h fusedMM_internal.h
	mkdir -p $(BIN)
	$(CC) $(CCFLAGS) $(TYPFLAGS) -I$(KINCdir) @(pflg) @(optflg) \
           -c fusedMM.c -o $@   
           @undef optflg 
   @endwhile
#
#  Compiling FusedMMTime  
#
   @multidef  kn sigmoid tdist fr spmm gcn 
   @whiledef kn
$(BIN)/$(pre)FusedMMtime_@(kn)@(pt).o: $(Tdir)/fusedMMtime.cpp fusedMM.h \
   $(KINCdir)/kernels.h  
	mkdir -p $(BIN)
	$(CPP) $(CPPFLAGS) $(TYPFLAGS) -I$(KINCdir) -D@up@(kn)_UDEF \
	   -DCPP @(pflg) -c $(Tdir)/fusedMMtime.cpp -o $@   
   @endwhile
#
#  Executables 
#
   @multidef fmm FusedMM OptFusedMM
   @whiledef fmm
      @multidef  kn sigmoid tdist fr spmm gcn 
      @whiledef kn
$(BIN)/x$(pre)@(fmm)time_@(kn)@(pt): $(BIN)/$(pre)FusedMMtime_@(kn)@(pt).o \
   $(BIN)/$(pre)@(fmm)@(pt).o @(lib)  
	$(CPP) $(CPPFLAGS) -o $@ $^ @(lib) -lm
      @endwhile
   @endwhile
   
   @undef pt 
   @undef pflg
   @undef lib
@endwhile 

#
# GPU implementation
#     NOTE: testing with only modified sigmoid implementation for now 
#
acc : $(BIN)/x$(pre)FusedMMtimeCU_sigmoid 
	$(BIN)/x$(pre)FusedMMtimeCU_sigmoid -input dataset/harvard.mtx -T 1 -K $(d)  

AKdir = ./cuda-kernels
ACC = nvcc
CUDA_HOME = /usr/local/cuda-11.1
#ACCINC = -I$(CUDA_HOME)/include 

### NOTE: to include debug code 
ACCINC = -I$(CUDA_HOME)/include -I$(CUDA_HOME)/samples/common/inc/
ACCLIB = -L$(CUDA_HOME)/lib64 -lcudart

ACCFLAGS = -lineinfo -arch=sm_75 --ptxas-options=-v --use_fast_math

$(BIN)/$(pre)cufusedmm.o: $(AKdir)/fusedmm.cu
	$(ACC) $(AKdir)/fusedmm.cu $(TYPFLAGS) -c -o $@ $(ACCINC) $(ACCFLAGS)

$(BIN)/$(pre)FusedMMtimeCU_sigmoid.o: $(Tdir)/fusedMMtime.cpp fusedMM.h \
   $(KINCdir)/kernels.h  
	$(CPP) $(CPPFLAGS) $(TYPFLAGS) -I$(KINCdir) -DCUDA_KERN -DSIGMOID_UDEF \
	   -DCPP  -c $(Tdir)/fusedMMtime.cpp -o $@  

$(BIN)/x$(pre)FusedMMtimeCU_sigmoid: $(BIN)/$(pre)FusedMMtimeCU_sigmoid.o \
   $(BIN)/$(pre)FusedMM.o $(BIN)/$(pre)cufusedmm.o $(sLIBs)  
	$(CPP) $(CPPFLAGS) $(ACCINC) -o $@ $^ $(sLIBs) -lm $(ACCLIB)

#
# cleanup 
#
clean:
	rm -rf ./bin/*

kill:
	rm -rf ./bin/x*

killlib: 
	cd $(Kdir) ; make clean pre=s
@ROUT !
