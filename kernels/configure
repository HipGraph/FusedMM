#!/bin/sh 
#
#  configure script to setup Make.inc file 
#     path, arch flags 
#  dependencies : 
#  shell built-in deps: echo

#option in config 
#path=`echo $0`
path=`echo $0 | sed -e "s/configure$//"`
#echo $path 

topdir=`pwd`
vtopdir="TOP = $topdir"

#
#  configure should be call inside kernel dir, don't create extra build 
#     directory for it
#
if test "$path" != "./" 
then
   #path=`echo "$path" | sed -e "s|/.//||g"` 
   ctopdir=$topdir/
   if test "$path" != "$ctopdir"
   then
      echo "run configure from same dir as kernels!"
      exit 1
   fi
fi

#
#  replace old TOP with current dir 
#
oldtop="TOP ="
newtop=$vtopdir
sed "s|$oldtop|$newtop|g" $topdir/CONFIG/Make.top > $topdir/Make.inc 

#
#  compiler 
#
echo "Checking for gcc ... ... "
cc=`gcc --version | grep -e gcc`
if [ -z "$cc" ]
then
   echo "gcc is required!"
   exit 1
fi
echo "--- $cc"
cc=gcc

oldkcc="KCC ="
newkcc="KCC = $cc"
sed -i "s/$oldkcc/$newkcc/g" $topdir/Make.inc

#
#  find system arch 
#
echo "Figuring out the architecture of the system ... ... "
carch=`lscpu | grep -e x86`
arch=X86
if [ -z "$carch" ]
then
   # check whether it is arch64
   carch=`lscpu | grep -e aarch64`
   arch=ARM64
   if [ -z "$carch" ]
   then
      arch=
   fi
fi

if [ -z "$arch" ]
then
   echo "Can not figure out the architecture, set ARCH flag manually"
   exit 2
fi

#echo "ARCH = $arch"
arch=BLC_$arch
oldarch="ARCH ="
newarch="ARCH = $arch"
sed -i "s/$oldarch/$newarch/g" $topdir/Make.inc

echo "--- $arch"

#
#  find SIMD unit 
#
echo "Figuring out the SIMD unit of the system ... ... "
svlen=
dvlen=
if  test "$arch" = "BLC_X86" 
then
   csimdf=`lscpu | grep -e avx512f`
   csimddq=`lscpu | grep -e avx512dq`
   simd=AVXZ
   svlen=16
   dvlen=8
   cflags="-mavx512f -mavx512dq"
   if [ -z "$csimdf" ] || [ -z "$csimddq" ]
   then
      csimd=`lscpu | grep -e avx2`
      simd=AVX2
      svlen=8
      dvlen=4
      cflags="-mavx -mfma"
      if [ -z "$csimd" ] 
      then
         simd=AVX
         cflags="-mavx"
         csimd=`lscpu | grep -e avx`
         if [ -z "$csimd" ] 
         then
            simd=SSE
            svlen=4
            dvlen=2
            cflags="-msse"
            csimd=`lscpu | grep -e sse`
            if [ -z "$csimd" ] 
            then
               simd=
            fi
         fi
      fi
   fi

   if test "$simd" = "SSE"
   then
      echo "not supported SSE only system for now!"
      exit 3
   fi
   if [ -z "$simd" ] 
   then
      echo "can't figure out SIMD unit for this X86 system!"
      exit 3
   fi
   simd=BLC_$simd
fi

if  test "$arch" = "BLC_ARM64" 
then
   csimd=`lscpu | grep -e asimd`
   simd=ASIMD
   svlen=4
   dvlen=2
   cflags="-march=armv8-a"
   if [ -z "$csimd" ] 
   then
      simd=
      echo "unknown simd unit for ARM64!"
      exit 3
   fi
   simd=BLC_ARM_$simd
fi

echo "--- $simd"
echo "--- $cflags"
oldsimd="SIMD ="
newsimd="SIMD = $simd"
sed -i "s/$oldsimd/$newsimd/g" $topdir/Make.inc

oldflg="KCCFLAGS ="
newflg="KCCFLAGS = $cflags"
sed -i "s/$oldflg/$newflg/g" $topdir/Make.inc

echo "Generating run script ... ..."
oldpre="PRE=x"
newpre="PRE=s" # default float
sed "s/$oldpre/$newpre/" $topdir/CONFIG/rungen.top > $topdir/rungen.sh
sed -i "s/VLEN=x/VLEN=$svlen/" $topdir/rungen.sh
chmod u+x $topdir/rungen.sh 

#
#  optional: update Makefile of tester/timer with appropriate pre and vlen
#
sed -i "s/pre=.*/pre=s/" $topdir/../Makefile
sed -i "s/vlen=.*/vlen=$svlen/" $topdir/../Makefile
nth=`grep 'cpu cores' /proc/cpuinfo | uniq`
sed -i "s/NTHREADS=.*/NTHREADS=$nth/" $topdir/../Makefile

echo "Done configure"
